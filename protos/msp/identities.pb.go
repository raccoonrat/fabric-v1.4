// Code generated by protoc-gen-go. DO NOT EDIT.
// source: identities.proto

package msp

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// This struct represents an Identity
// (with its MSP identifier) to be used
// to serialize it and deserialize it
type SerializedIdentity struct {
	// The identifier of the associated membership service provider
	Mspid string `protobuf:"bytes,1,opt,name=mspid,proto3" json:"mspid,omitempty"`
	// the Identity, serialized according to the rules of its MPS
	IdBytes              []byte   `protobuf:"bytes,2,opt,name=id_bytes,json=idBytes,proto3" json:"id_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SerializedIdentity) Reset()         { *m = SerializedIdentity{} }
func (m *SerializedIdentity) String() string { return proto.CompactTextString(m) }
func (*SerializedIdentity) ProtoMessage()    {}
func (*SerializedIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb899f6f31212f0, []int{0}
}

func (m *SerializedIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerializedIdentity.Unmarshal(m, b)
}
func (m *SerializedIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerializedIdentity.Marshal(b, m, deterministic)
}
func (m *SerializedIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializedIdentity.Merge(m, src)
}
func (m *SerializedIdentity) XXX_Size() int {
	return xxx_messageInfo_SerializedIdentity.Size(m)
}
func (m *SerializedIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializedIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_SerializedIdentity proto.InternalMessageInfo

func (m *SerializedIdentity) GetMspid() string {
	if m != nil {
		return m.Mspid
	}
	return ""
}

func (m *SerializedIdentity) GetIdBytes() []byte {
	if m != nil {
		return m.IdBytes
	}
	return nil
}

// This struct represents an Idemix Identity
// to be used to serialize it and deserialize it.
// The IdemixMSP will first serialize an idemix identity to bytes using
// this proto, and then uses these bytes as id_bytes in SerializedIdentity
type SerializedIdemixIdentity struct {
	// nym_x is the X-component of the pseudonym elliptic curve point.
	// It is a []byte representation of an amcl.BIG
	// The pseudonym can be seen as a public key of the identity, it is used to verify signatures.
	NymX []byte `protobuf:"bytes,1,opt,name=nym_x,json=nymX,proto3" json:"nym_x,omitempty"`
	// nym_y is the Y-component of the pseudonym elliptic curve point.
	// It is a []byte representation of an amcl.BIG
	// The pseudonym can be seen as a public key of the identity, it is used to verify signatures.
	NymY []byte `protobuf:"bytes,2,opt,name=nym_y,json=nymY,proto3" json:"nym_y,omitempty"`
	// ou contains the organizational unit of the idemix identity
	Ou []byte `protobuf:"bytes,3,opt,name=ou,proto3" json:"ou,omitempty"`
	// role contains the role of this identity (e.g., ADMIN or MEMBER)
	Role []byte `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// proof contains the cryptographic evidence that this identity is valid
	Proof                []byte   `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SerializedIdemixIdentity) Reset()         { *m = SerializedIdemixIdentity{} }
func (m *SerializedIdemixIdentity) String() string { return proto.CompactTextString(m) }
func (*SerializedIdemixIdentity) ProtoMessage()    {}
func (*SerializedIdemixIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb899f6f31212f0, []int{1}
}

func (m *SerializedIdemixIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerializedIdemixIdentity.Unmarshal(m, b)
}
func (m *SerializedIdemixIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerializedIdemixIdentity.Marshal(b, m, deterministic)
}
func (m *SerializedIdemixIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializedIdemixIdentity.Merge(m, src)
}
func (m *SerializedIdemixIdentity) XXX_Size() int {
	return xxx_messageInfo_SerializedIdemixIdentity.Size(m)
}
func (m *SerializedIdemixIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializedIdemixIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_SerializedIdemixIdentity proto.InternalMessageInfo

func (m *SerializedIdemixIdentity) GetNymX() []byte {
	if m != nil {
		return m.NymX
	}
	return nil
}

func (m *SerializedIdemixIdentity) GetNymY() []byte {
	if m != nil {
		return m.NymY
	}
	return nil
}

func (m *SerializedIdemixIdentity) GetOu() []byte {
	if m != nil {
		return m.Ou
	}
	return nil
}

func (m *SerializedIdemixIdentity) GetRole() []byte {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *SerializedIdemixIdentity) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

// This struct represents an IBPCLA Identity
// to be used to serialize it and deserialize it.
// The IBPCLAMSP will first serialize an ibpcla identity to bytes using
// this proto, and then uses these bytes as id_bytes in SerializedIdentity
type SerializedIBPCLAIdentity struct {
	// PA is the vice identity, it is an elliptic curve point generated from KGC.
	// It is a []byte representation of BIG.int with X coordinate along with Y coordinate
	// PA is used to recover public keys when verifying signatures.
	PA []byte `protobuf:"bytes,1,opt,name=PA,proto3" json:"PA,omitempty"`
	// ou contains the organizational unit of the ibpcla identity
	Ou []byte `protobuf:"bytes,2,opt,name=ou,proto3" json:"ou,omitempty"`
	// role contains the role of this identity (e.g., ADMIN or MEMBER)
	Role []byte `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	// ID represents the identity
	ID                   string   `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SerializedIBPCLAIdentity) Reset()         { *m = SerializedIBPCLAIdentity{} }
func (m *SerializedIBPCLAIdentity) String() string { return proto.CompactTextString(m) }
func (*SerializedIBPCLAIdentity) ProtoMessage()    {}
func (*SerializedIBPCLAIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bb899f6f31212f0, []int{2}
}

func (m *SerializedIBPCLAIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerializedIBPCLAIdentity.Unmarshal(m, b)
}
func (m *SerializedIBPCLAIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerializedIBPCLAIdentity.Marshal(b, m, deterministic)
}
func (m *SerializedIBPCLAIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializedIBPCLAIdentity.Merge(m, src)
}
func (m *SerializedIBPCLAIdentity) XXX_Size() int {
	return xxx_messageInfo_SerializedIBPCLAIdentity.Size(m)
}
func (m *SerializedIBPCLAIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializedIBPCLAIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_SerializedIBPCLAIdentity proto.InternalMessageInfo

func (m *SerializedIBPCLAIdentity) GetPA() []byte {
	if m != nil {
		return m.PA
	}
	return nil
}

func (m *SerializedIBPCLAIdentity) GetOu() []byte {
	if m != nil {
		return m.Ou
	}
	return nil
}

func (m *SerializedIBPCLAIdentity) GetRole() []byte {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *SerializedIBPCLAIdentity) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func init() {
	proto.RegisterType((*SerializedIdentity)(nil), "msp.SerializedIdentity")
	proto.RegisterType((*SerializedIdemixIdentity)(nil), "msp.SerializedIdemixIdentity")
	proto.RegisterType((*SerializedIBPCLAIdentity)(nil), "msp.SerializedIBPCLAIdentity")
}

func init() { proto.RegisterFile("identities.proto", fileDescriptor_0bb899f6f31212f0) }

var fileDescriptor_0bb899f6f31212f0 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4b, 0xf3, 0x30,
	0x1c, 0xc6, 0x59, 0xd6, 0xbe, 0xaf, 0x0b, 0xa3, 0x48, 0xf4, 0x10, 0x6f, 0xb3, 0xa7, 0x9e, 0xda,
	0x83, 0x9f, 0xa0, 0x75, 0x1e, 0x0a, 0x0a, 0xa5, 0x5e, 0xd4, 0x83, 0x63, 0x5d, 0xb2, 0xee, 0x0f,
	0x4d, 0x13, 0x92, 0x16, 0x16, 0x0f, 0x7e, 0x76, 0x69, 0x53, 0xc7, 0x86, 0xb7, 0xff, 0xf3, 0xf0,
	0xe3, 0xf9, 0x85, 0xe0, 0x6b, 0x60, 0xbc, 0xed, 0xa0, 0x03, 0x6e, 0x62, 0xa5, 0x65, 0x27, 0xc9,
	0x5c, 0x18, 0x15, 0x3e, 0x61, 0xf2, 0xca, 0x35, 0x6c, 0x1b, 0xf8, 0xe2, 0x2c, 0x77, 0x88, 0x25,
	0xb7, 0xd8, 0x17, 0x46, 0x01, 0xa3, 0xb3, 0xd5, 0x2c, 0x5a, 0x94, 0x2e, 0x90, 0x3b, 0x7c, 0x05,
	0x6c, 0x53, 0xd9, 0x8e, 0x1b, 0x8a, 0x56, 0xb3, 0x68, 0x59, 0xfe, 0x07, 0x96, 0x0d, 0x31, 0xfc,
	0xc6, 0xf4, 0x62, 0x46, 0xc0, 0xf1, 0x34, 0x76, 0x83, 0xfd, 0xd6, 0x8a, 0xcd, 0x71, 0x1c, 0x5b,
	0x96, 0x5e, 0x6b, 0xc5, 0xdb, 0x6f, 0x69, 0xa7, 0xa1, 0xa1, 0x7c, 0x27, 0x01, 0x46, 0xb2, 0xa7,
	0xf3, 0xb1, 0x41, 0xb2, 0x27, 0x04, 0x7b, 0x5a, 0x36, 0x9c, 0x7a, 0x8e, 0x19, 0xee, 0xe1, 0x69,
	0x4a, 0x4b, 0xb9, 0xa7, 0xfe, 0x58, 0xba, 0x10, 0x7e, 0x5e, 0xf8, 0xb3, 0xe2, 0xf1, 0x39, 0x3d,
	0xf9, 0x03, 0x8c, 0x8a, 0x74, 0x92, 0xa3, 0x22, 0x9d, 0x2c, 0xe8, 0x8f, 0x65, 0x7e, 0x66, 0x09,
	0x30, 0xca, 0xd7, 0xa3, 0x77, 0x51, 0xa2, 0x7c, 0x9d, 0xbd, 0xe0, 0x7b, 0xa9, 0xeb, 0xf8, 0x60,
	0x15, 0xd7, 0x0d, 0x67, 0x35, 0xd7, 0xf1, 0x7e, 0x5b, 0x69, 0xd8, 0xb9, 0xbf, 0x34, 0xb1, 0x30,
	0xea, 0x23, 0xaa, 0xa1, 0x3b, 0xf4, 0x55, 0xbc, 0x93, 0x22, 0x39, 0x23, 0x13, 0x47, 0x26, 0x8e,
	0x4c, 0x84, 0x51, 0xd5, 0xbf, 0xf1, 0x7e, 0xf8, 0x09, 0x00, 0x00, 0xff, 0xff, 0x44, 0xca, 0xc0,
	0x47, 0x95, 0x01, 0x00, 0x00,
}
